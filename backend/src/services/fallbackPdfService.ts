import { ProductReportData } from './pdfService';

export class FallbackPDFService {
  static generateSimplePDF(productData: ProductReportData): Buffer {
    try {
      // Use jsPDF for reliable PDF generation
      const { jsPDF } = require('jspdf');
      const doc = new jsPDF();

      // Set up the document
      doc.setFontSize(20);
      doc.text('Product Transparency Report', 20, 30);

      doc.setFontSize(14);
      doc.text(`Product: ${productData.name}`, 20, 50);
      doc.text(`Category: ${productData.category}`, 20, 65);
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 80);

      // Add questions and answers
      doc.setFontSize(16);
      doc.text('Assessment Details:', 20, 105);

      let yPosition = 125;
      doc.setFontSize(12);

      productData.answers.forEach((answer, index) => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 30;
        }

        const question = this.formatQuestionId(answer.questionId);
        const answerText = this.formatAnswer(answer.answer);

        doc.setFont(undefined, 'bold');
        doc.text(`${index + 1}. ${question}`, 20, yPosition);
        
        doc.setFont(undefined, 'normal');
        yPosition += 10;
        
        // Handle long answers by splitting into multiple lines
        const lines = doc.splitTextToSize(`Answer: ${answerText}`, 170);
        doc.text(lines, 25, yPosition);
        yPosition += lines.length * 7 + 10;
      });

      // Add footer
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text('Generated by Altibbe Product Transparency System', 20, 285);
        doc.text(`Page ${i} of ${pageCount}`, 170, 285);
      }

      // Return the PDF as buffer
      const pdfOutput = doc.output('arraybuffer');
      return Buffer.from(pdfOutput);

    } catch (error) {
      console.error('jsPDF generation failed:', error);
      // Fallback to simple text if jsPDF fails
      return this.generateTextFallback(productData);
    }
  }

  private static generateTextFallback(productData: ProductReportData): Buffer {
    const content = `
PRODUCT TRANSPARENCY REPORT
==========================

Product Name: ${productData.name}
Category: ${productData.category}
Generated: ${new Date().toLocaleString()}

DETAILED ASSESSMENT
==================

${productData.answers.map((answer, index) => `
${index + 1}. ${this.formatQuestionId(answer.questionId)}
   Answer: ${this.formatAnswer(answer.answer)}
`).join('\n')}

---
This report was automatically generated by the Altibbe Product Transparency System
    `;

    return Buffer.from(content, 'utf-8');
  }

  private static formatQuestionId(questionId: string): string {
    return questionId
      .replace(/_/g, ' ')
      .replace(/\b\w/g, l => l.toUpperCase());
  }

  private static formatAnswer(answer: any): string {
    if (typeof answer === 'boolean') {
      return answer ? 'Yes' : 'No';
    }
    if (typeof answer === 'object') {
      return JSON.stringify(answer, null, 2);
    }
    return String(answer);
  }
}
